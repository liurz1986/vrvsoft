
tkmybatis使用
1.引入tkmybatis依赖
比如：
 <dependency>
    <groupId>tk.mybatis</groupId>
    <artifactId>mapper-spring-boot-starter</artifactId>
    <version>2.1.5</version>
</dependency>
2.创建实体类：tkmybatis 实体类使用的注解是jpa注解；原生mybatis实体类是没有注解的
3.创建接口继承Mapper

说明：
1.TKMybatis 是基于 Mybatis 框架开发的一个工具，在tkmybatis中mybatis功能都可以用
2.数据源、分页插件、逆向工程、配置还是和mybatis一样的
3.单表操作，不要在写sql直接用tkmybatis提供就可以了，主要是因为tkmybatis实体类使用的注解是jpa注解，让表与实例进行关联；复杂的sql还是采用mybatis方式手写


mybatisplus的使用
1.引入依赖
比如：
<dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus-boot-starter</artifactId>
    <version>3.3.2</version>
</dependency>
2.创建实体类：MyBatisPlus 提供了一些注解供我们在实体类和表信息出现不对应的时候使用
3.创建接口继承BaseMapper

说明：
1.Mybatis-Plus是一个Mybatis的增强工具，只是在Mybatis的基础上做了增强却不做改变，MyBatis-Plus支持所有Mybatis原生的特性，所以引入Mybatis-Plus不会对现有的Mybatis构架产生任何影响。



MyBatis的优缺点
优点
1.MyBatis封装了JBDC底层访问数据库的细节,使我们程序猿不需要与JDBC API打交道,就可以访问数据库
2.MyBatis简单易学,程序猿直接编写SQL语句,适合于对SQL语句性能要求比较高的项目
3.SQL语句封装在配置文件中，便于统一管理与维护，降低了程序的耦合度
4.SQL代码从程序代码中彻底分离出来，可重用
5.提供了动态SQL标签，支持编写动态SQL
6.提供映射标签，支持对象与数据库的ORM字段关系映射
缺点
1.过于依赖数据库SQL语句,导致数据库移植性差,更换数据库,如果SQL语句有差异,SQL语句工作量大
2.由于xml里标签id必须唯一，导致DAO中方法不支持方法重载

mybatisplus的优点
1.通用CRUD操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 。
2.支持mybatis原生操作
3.内置分页插件、内置性能分析插件
4.内置全局拦截插件
5.支持关键词自动转义
6.支持热加载
7.预防Sql注入：内置 Sql 注入剥离器，有效预防Sql注入攻击 。
8.损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作 。
9.依赖少：仅仅依赖 Mybatis 以及 Mybatis-Spring 。
10.默认将实体类的类名查找数据库中的表，使用@TableName(value=“table1”)注解指定表名，@TableId指定表主键，若字段与表中字段名保持一致可不加注解。

TKMybatis优点：
1.通用CRUD操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 。
2.支持mybatis原生操作
3.实体类使用的注解是jpa注解，将实体类与表进行映射
4.相对于mybatisplus来说更轻量级，可以更好切换到JPA













<!--mybatis分页插件-->
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper-spring-boot-starter</artifactId>
    <version>1.2.3</version>
</dependency>

<!--整合druid数据源-->
<dependency>
   <groupId>com.alibaba</groupId>
   <artifactId>druid-spring-boot-starter</artifactId>
   <version>1.1.10</version>
</dependency>
<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-java</artifactId>
  <scope>runtime</scope>
</dependency>

<!-- MyBatis 逆向工程 插件配置start -->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.5</version>
                <configuration>
                    <configurationFile>
                        ${basedir}/src/main/resources/generator/generatorConfig.xml
                    </configurationFile>
                    <verbose>true</verbose><!-- 允许移动生成的文件 -->
                    <overwrite>true</overwrite><!-- 是否覆盖 -->
                </configuration>

                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>${mysql.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>tk.mybatis</groupId>
                        <artifactId>mapper</artifactId>
                        <version>3.5.3</version>
                    </dependency>
                </dependencies>
</plugin><!-- MyBatis 逆向工程 插件配置



# mybatis配置
#mybatis中配置的实体
mybatis.type-aliases-package = com.lrz.entity
#mapper扫描xml路径：单纯用tkmybatis不需要写的sql情况，这个是没有用的；这个主要为了手写sql用的
mybatis.mapper-locations=classpath:mapper/*.xml
#mybatsi开启控制台sql语句打印
mybatis.configuration.log-impl= org.apache.ibatis.logging.stdout.StdOutImpl